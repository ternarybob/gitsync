name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.21'

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get dependencies
      run: go mod download

    - name: Get version
      id: version
      shell: powershell
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        } elseif (Test-Path ".version") {
          $version = (Get-Content .version | Where-Object { $_ -match '^version:' } | ForEach-Object { ($_ -split ':')[1].Trim() })
        } else {
          $version = "${{ github.ref_name }}"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        Write-Host "Using version: $version"

    - name: Build for Windows AMD64
      shell: powershell
      run: |
        $VERSION = "${{ steps.version.outputs.version }}"
        $BUILD_TIME = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $env:CGO_ENABLED = "0"
        $env:GOOS = "windows"
        $env:GOARCH = "amd64"

        New-Item -ItemType Directory -Force -Path "bin"
        go build -o "bin/gitsync-windows-amd64.exe" `
          -ldflags "-X github.com/ternarybob/gitsync/internal/common.Version=$VERSION -X 'github.com/ternarybob/gitsync/internal/common.Build=$BUILD_TIME' -s -w" `
          -trimpath ./cmd/gitsync

    - name: Build for Windows ARM64
      shell: powershell
      run: |
        $VERSION = "${{ steps.version.outputs.version }}"
        $BUILD_TIME = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $env:CGO_ENABLED = "0"
        $env:GOOS = "windows"
        $env:GOARCH = "arm64"

        go build -o "bin/gitsync-windows-arm64.exe" `
          -ldflags "-X github.com/ternarybob/gitsync/internal/common.Version=$VERSION -X 'github.com/ternarybob/gitsync/internal/common.Build=$BUILD_TIME' -s -w" `
          -trimpath ./cmd/gitsync

    - name: Upload Windows AMD64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: gitsync-windows-amd64
        path: bin/gitsync-windows-amd64.exe

    - name: Upload Windows ARM64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: gitsync-windows-arm64
        path: bin/gitsync-windows-arm64.exe

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get dependencies
      run: go mod download

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        elif [ -f ".version" ]; then
          VERSION=$(grep '^version:' .version | awk '{print $2}')
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"

    - name: Build for Linux AMD64
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        BUILD_TIME=$(date '+%Y-%m-%d %H:%M:%S')
        mkdir -p bin
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bin/gitsync-linux-amd64 \
          -ldflags "-X github.com/ternarybob/gitsync/internal/common.Version=$VERSION -X 'github.com/ternarybob/gitsync/internal/common.Build=$BUILD_TIME' -s -w" \
          -trimpath ./cmd/gitsync

    - name: Build for Linux ARM64
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        BUILD_TIME=$(date '+%Y-%m-%d %H:%M:%S')
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o bin/gitsync-linux-arm64 \
          -ldflags "-X github.com/ternarybob/gitsync/internal/common.Version=$VERSION -X 'github.com/ternarybob/gitsync/internal/common.Build=$BUILD_TIME' -s -w" \
          -trimpath ./cmd/gitsync

    - name: Upload Linux AMD64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: gitsync-linux-amd64
        path: bin/gitsync-linux-amd64

    - name: Upload Linux ARM64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: gitsync-linux-arm64
        path: bin/gitsync-linux-arm64

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get dependencies
      run: go mod download

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        elif [ -f ".version" ]; then
          VERSION=$(grep '^version:' .version | awk '{print $2}')
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"

    - name: Build for macOS AMD64
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        BUILD_TIME=$(date '+%Y-%m-%d %H:%M:%S')
        mkdir -p bin
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o bin/gitsync-darwin-amd64 \
          -ldflags "-X github.com/ternarybob/gitsync/internal/common.Version=$VERSION -X 'github.com/ternarybob/gitsync/internal/common.Build=$BUILD_TIME' -s -w" \
          -trimpath ./cmd/gitsync

    - name: Build for macOS ARM64
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        BUILD_TIME=$(date '+%Y-%m-%d %H:%M:%S')
        CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -o bin/gitsync-darwin-arm64 \
          -ldflags "-X github.com/ternarybob/gitsync/internal/common.Version=$VERSION -X 'github.com/ternarybob/gitsync/internal/common.Build=$BUILD_TIME' -s -w" \
          -trimpath ./cmd/gitsync

    - name: Upload macOS AMD64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: gitsync-darwin-amd64
        path: bin/gitsync-darwin-amd64

    - name: Upload macOS ARM64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: gitsync-darwin-arm64
        path: bin/gitsync-darwin-arm64

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          gitsync-windows-amd64/gitsync-windows-amd64.exe
          gitsync-windows-arm64/gitsync-windows-arm64.exe
          gitsync-linux-amd64/gitsync-linux-amd64
          gitsync-linux-arm64/gitsync-linux-arm64
          gitsync-darwin-amd64/gitsync-darwin-amd64
          gitsync-darwin-arm64/gitsync-darwin-arm64
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}